esphome:
  name: d1mini-4-shunt
  platform: ESP8266
  board: d1_mini

mqtt:                                                                                                 
  broker: !secret MQTT_IP
  port: 1883                                                                                         
  username: !secret MQTT_User
  password: !secret MQTT_Password
  topic_prefix: d1mini-4-shunt
  
# Enable logging
logger:

# Enable Home Assistant API
api:

external_components:
  - source: github://KinDR007/VictronSmartShunt-ESPHOME@main
    refresh: 0s

substitutions:
  lower_devicename: "smartshunt"
  devicename: "SmartShunt_500A"
  config_version: "v2021.12.04.001"
  # wifi_fast_connect: "false"
  # wifi_reboot_timeout: 0s
  accuracy: "2"

ota:
  password: "OTA_Password"

wifi:
  networks:
  - ssid: !secret Skyus_wifi_ssid
    password: !secret Skyus_wifi_password
  - ssid: !secret SenseNet_wifi_ssid
    password: !secret SenseNet_wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "D1Mini-4-shunt Fallback Hotspot"
    password: !secret Fallback_wifi_password

captive_portal:

web_server:

uart:
  id: uart0
#  tx_pin: D8  #D8 not used here
  rx_pin: D7
  baud_rate: 19200
  rx_buffer_size: 256
  #On harness, Black wire is ground, white is TX from Shunt (RX on D1 Mini)  

victron_smart_shunt:
  uart_id: uart0

sensor:
  - platform: victron_smart_shunt
    battery_voltage:
      name: "Shunt Battery Voltage"
      id: shunt_bv
      accuracy_decimals: ${accuracy}

    battery_current:
      name: "Shunt Battery Current"
      id: shunt_battery_current
      accuracy_decimals: ${accuracy}

    fw_version:
      name: "Shunt fw"
      id: shunt_fw

    pid:
      name: "Shunt pid"
      id: shunt_pid

#    instantaneous_power:
#      name: "instanteneous_power"
#      id: instantaneous_power
#      accuracy_decimals: ${accuracy}

    time_to_go:
      name: "Shunt time to go"
      id: shunt_time_to_go

    consumed_amp_hours:
      name: "Shunt consumed amp hours"
      id: shunt_consumed_amp_hours
      unit_of_measurement: Ah
      accuracy_decimals: ${accuracy}

    min_battery_voltage:
      name: "Shunt Min battery voltage"
      id: shunt_min_battery_voltage
      accuracy_decimals: ${accuracy}

    max_battery_voltage:
      name: "Shunt Max battery voltage"
      id: shunt_max_battery_voltage
      accuracy_decimals: ${accuracy}

    amount_of_charged:
      name: "Shunt Amount of charged"
      id: shunt_amount_of_charged
      filters:
        - multiply: 0.001
      unit_of_measurement: kWh
      accuracy_decimals: ${accuracy}

    last_full_charge:
      name: "Shunt Time since last full charge"
      id: shunt_last_full_charge

    deepest_discharge:
      name: "Shunt Depth of the deepest discharge"
      id: shunt_deepest_discharge
      unit_of_measurement: Ah
      accuracy_decimals: ${accuracy}

    last_discharge:
      name: "Shunt Depth of the last discharge"
      id: shunt_last_discharge
      unit_of_measurement: Ah
      accuracy_decimals: ${accuracy}

    discharged_energy:
      name: "Shunt Amount of discharged energy"
      id: shunt_discharged_energy
      filters:
        - multiply: 0.001
      unit_of_measurement: kWh
      accuracy_decimals: ${accuracy}

    state_of_charge:
      id: shunt_state_of_charge
      name: "Shunt SoC"
  
  
font:
  - file: "/config/fonts/DejaVuSansMono.ttf"
    id: my_font_10
    size: 10
  - file: "/config/fonts/DejaVuSansMono.ttf"
    id: my_font_20
    size: 20    

time:
  - platform: sntp
    id: sntp_time    
    update_interval: 60s    
    
    
i2c:
  sda: D2
  scl: D1
  scan: false  
  
display:
  - platform: ssd1306_i2c
    model: "SSD1306 64x48"
    reset_pin: D0
    address: 0x3C
    id: my_display
    
    pages:
      - id: page1
        lambda: |-
          it.printf(0, 0, id(my_font_10), "D1 Mini");
          it.printf(0, 10, id(my_font_10), "4-Shunt");
          it.strftime(0, 20, id(my_font_10), "%Y-%m-%d", id(sntp_time).now());          
          it.strftime(0, 30, id(my_font_10), "%H:%M:%S", id(sntp_time).now());
      - id: page2
        lambda: |-
          it.printf(0, 0, id(my_font_10), "State of");    
          it.printf(0, 10, id(my_font_10), "Charge");            
          it.printf(0, 20, id(my_font_20), "%.2f", id(shunt_state_of_charge).state);
      - id: page3
        lambda: |-
          it.printf(0, 0, id(my_font_10), "Battery");    
          it.printf(0, 10, id(my_font_10), "Current");            
          it.printf(0, 20, id(my_font_20), "%.2f", id(shunt_battery_current).state);          
     
interval:
  - interval: 3s
    then:
      - display.page.show_next: my_display
      - component.update: my_display



    
